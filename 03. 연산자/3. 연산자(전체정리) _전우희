1. 연산자(operator)
- 대입 연산자는 연산의 진행방향이 오른쪽에서 왼쪽이므로 수식 'x=y=3;' 의 경우 제일 오른쪽에서부터 계산을 시작해서 왼쪽으로 진행.

******************************************************************************************
    1. 산술 > 비교 > 논리 > 대입. 대입은 제일 마지막에 수행된다.
    2. 단항(1) > 이항(2) > 삼항(3). 단항 연산자의 우선순위가 이항 연산자보다 높다.
    3. 단항 연산자와 대입 연산자를 제외한 모든 연산의 진행방향은 왼쪽에서 오른쪽이다.
******************************************************************************************

2. 단항 연산자
    2.1 증감 연산자 - ++, --
        일반적으로 단항 연산자는 피연산자의 왼쪽에 위치하지만, 증가 연산자 '++'와 감소 연산자 '--'는 양쪽 모두 가능하다.
        연산자를 어느 위치에 놓는가에 따라서 연산결과가 달라질 수 있다.

        증가 연산자 ++ : 피연산자(operand)의 값을 1 증가시킨다.
        감소 연산자 -- : 피연산자(operand)의 값을 1 감소시킨다.

        boolean형을 제외한 모든 기본형(primitive type) 변수에 사용 가능하며, 피연산자의 오니쪽에 사용하는 전위형과 오른쪽에 사용하는 후위형이 있다.

    2.2 부호 연산자 - +, -
        부호 연산자는 피연산자의 부호를 변경하는데 사용되며, boolean형과 char형을 제외한 나머지 기본형에 사용할 수 있다.
    2.3 비트전환 연산자 - ~
        비트전환 연산자'~'는 정수형과 char형에만 사용될 수 있으며, 피연산자를 2진수로 표현했을 때, 0은 1로 1은 0으로 바꾼다.
        연산자'~'에 의해 비트전환 되고 나면, 피연산자의 부호가 반대로 변경된다.
    2.4 논리부정 연산자 - !
        boolean형에만 사용할 수 있으며, true는 false로 false는 true로 변경한다.
        조건문과 반복문의 조건식에 사용되어 조건식을 보다 효율적으로 만들어 준다.

3. 산술 연산자
 모든 이항 연산자는 연산을 수행하기 전에
- 크기가 4 byte이하인 자료형을 int형으로 변환한다. (byte, char, short -> int)
- 피연산자들의 타입을 서로 일치시킨다.
    3.1 사칙 연산자 - +, -, *, /
        * int형(4 byte)보다 크기가 작은 자료형은 int형으로 형변환 후에 연산을 수행한다.
            byte + short -> int + int -> int
        * 두 개의 피연산자 중 자료형의 표현범위가 큰 쪽에 맞춰서 형변환 된 후 연산을 수행한다.
            int + float -> float + float -> float
        * 정수형 간의 나눗셈에서 0으로 나누는 것은 금지되어 있다.
    3.2 나머지 연산자 - %
        왼쪽의 피연산자를 오른쪽 피연산자로 나누고 난 나머지 값을 돌려주는 연산자이다.
        boolean형을 제외하고는 모든 기본형 변수에 사용할 수 있다. 나머지 연산자는 주로 짝수, 홀수 또는 배수 검사 등이 주로 사용된다.
        나눗셈에서와 같이 피연산자가 정수형인 연산에서는 나누는 수(오른쪽 피연산자)로 0을 사용할 수 없고, 나머지 연산자 역시 0.0이나 0.0f로 나누는 것은 허용한다.
    3.3 쉬프트 연산자 - <<, >>, >>>
        쉬프트 연산자는 정수형 변수에만 사용할 수 있는데, 피연산자의 각 자리를 오른쪽 또는 왼쪽으로 이동(shift)한다고 해서 쉬프트 연산자(shift operator).
        오른쪽으로 n자리를 이동하면 피연산자를 2ⁿ로 나눈 것과 같은 결과를, 왼쪽으로 n자리를 이동하면 2ⁿ으로 곱한 것과 같은 결과를 얻을 수 있다.
        * x << n은 x*2ⁿ의 결과와 같다.
          y >> n은 x/2ⁿ의 결과와 같다.

4. 비교 연산자
 비교 연산자는 두 개의 변수 또는 리터럴을 비교하는 데 사용되는 연산자로, 주로 조건문과 반복문의 조건식에 사용되며, 연산결과는 true 또는 false이다.
 비교 연산자 역시 이항 연산자이므로 비교하는 피연산자의 자료형이 서로 다를 경우에는 자료형의 범위가 더 큰 쪽으로 형변환하여 피연산자의 타입을 일치시킨 후에 비교한다.
    4.1 대소비교 연산자 - <, >, <=, >=
        두 피연산자의 크기를 비교하는 연산자이다. 기본형 중에서는 boolean형을 제회한 나머지 자료형에 다 사용할 수 있지만 참조형에는 사용할 수 없다.
    4.2 등가비교 연산자 - ==, !=
        두 피연산자에 저장되어 있는 값이 같은지 또는 다른지를 비교하는 연산자이다.
        기본형과 참조형 간에는 서로 형변환이 가능하지 않기 때문에 등가비교 연산자의 피연산자로 기본형과 참조형을 함께 사용할 수는 없다.

5. 논리 연산자
    5.1 논리 연산자 - &&, ||
        논리 연산자는 피연산자로 boolean형 또는 boolean형 값을 결과로 하는 조건식만을 허용한다.
        조건문과 반복문에서 조건식 간의 결합에 사용된다.
        '&&'가 '||' 연산보다 우선순위가 높으므로 한 조건식에 함께 사용될 때는 괄호를 사용해서 우선순위를 명확히 해주는 것이 좋다.
    5.2 비트 연산자 - &, |, ^
        이진 비트연산을 수행한다.
        실수형인 float와 double 제외한 모든 기본형에 사용가능.
        값을 이진수로 표현했을 때의 각 자리수를 밑의 규첵에 따라 연산 수행.
        x   y   x|y     x&y     x^y
        1   1   1       1       0
        1   0   1       0       1
        0   1   1       0       1
        0   0   0       0       0

        |(OR연산자)  - 피연산자 중 한 쪽의 값이 1이면, 1을 결과로 얻는다. 그 외에는 0을 얻는다.
        &(AND연산자) - 피연산자 양 쪽이 모두 1이어야 1을 결과로 얻는다. 그 외에는 0을 얻는다.
        ^(XOR연산자) - 피연산자의 값이 서로 다를 때만 1을 결과로 얻는다. 같을 때는 0을 얻는다.

6. 그 외의 연산자
    6.1 삼항 연산자 - ? :
        세 개의 피연산자를 필요로 하기 때문에 삼항 연산자.
        조건식과 조건식이 참(true)일 때와 거짓(false)일 때 반환되는 값, 이 세 가지가 삼항 연산자와 피연산자이다.

        (조건식) ? 식1 : 식2
        result = (x > 0) ? x : -x ;

    6.2 대입 연산자 - =, op=
        변수에 값 또는 수식의 연산결과를 저장하는 데 사용된다.
        대입 연산자의 왼쪽에는 반드시 변수가 위치해야 하며, 오른쪽에는 리터럴이나 변수 또는 수식이 올 수 있다.

        int i = 0;
        i = 3;
        i = i + 3;
        3 = i + 3;      // 에러!! 대입 연산자의 왼쪽 피연산자의 변수가 아니다.
        final MAX = 3;  // 변수 앞에 final을 붙이면 상수가 된다.
        MAX = 10;       // 에러!! 상수의 값은 바꿀 수 없다.
