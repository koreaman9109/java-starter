2. 반복문 - for, while, do-while

    2.1 for문
    for문의 기본구조는 다음과 같다.
    
    for (초기화;조건식;증감식) {
        // 조건식의 연산결과가 true일 때 수행될 문장들을 적는다.
    }
    
    ※ 1. 초기화 -> 2. 조건식 -> 3. 수행될 문장 -> 4. 증감식
    초기화는 처음에만 한번 수행되고, 그 이후부터는 조건식을 만족하는 한 2-3-4의 순서로 계속 반복된다. 
    조건식의 결과가 false가 되면, for문 전체를 빠져나가게 된다. 초기화, 조건식, 증감식은 모두 생략이 가능하며, 조건식이 생략되면 true로 간주된다.

    [예제4-12]FLowEx12.java
    int sum =0; // 합계를 저장하기 위한 변수.

    for(int i=1; i <= 10; i++) {
        sum += i ; // sum = sum + i;
        System.out.println( i + " 까지의 합: " + sum);
    }

    [예제4-13]
    int sum =0; // 합계를 저장하기 위한 변수.
    
    for (int i=1; i <= 10; i++) {
    sum += i ; // sum = sum + i;
    }
    System.out.println( i + " 까지의 합: " + sum); // error발생!!!
    * for문 외에 다른 반복문이나 조건문에 선언된 변수들도 각 구문의 내부에서만 유효하다.

    [예제4-14]
    int sum =0; // 합계를 저장하기 위한 변수.
    int i; // 선언부분을 for문 밖으로 옮겼다.
    for(i=1; i <= 10; i++) {
    sum += i ; // sum = sum + i;
    }
    System.out.println( i-1 + " 까지의 합: " + sum);
    * for문의 카운터로 사용되는 변수는 주로 for문의 블럭{} 내에서만 사용되기 때문에, 
    for문 내에 선언해서 for문의 실행이 끝나고 나면 없어지도록 하는 것이 다음에 또 다른 반복문에서 다시 재사용할 수도 있어서 코드를 보다 단순화 하는데 도움이 된다.
    
    [예제4-20]
    System.out.println("자, 이제 카운트 다운을 시작합니다.");
    for(int i=10; i >= 0; i--) {
    for(int j = 0; j < 100000000; j++) {
    ;
    }
    System.out.println(i);
    }
    System.out.println("GAME OVER");

    [실행결과]
    자, 이제 카운트 다운을 시작합니다.
    10
    9
    8
    7
    6
    5
    4
    3
    2
    1
    0
    GAME OVER

    10부터 1까지 1씩 감소시켜가면서 출력을 하되 매출력마다 약 1초의 시간이 지연된다.
    위에 사용된 for문은 반복할 문장이 하나 밖에 없으므로 중괄호를 생략할 수 있으므로 다음과 같이 할 수 있다.
    for (int i=0; i < 1000000000; i++) ;

    예제에서는 for문의 중괄호{}내에 빈 문장(;)을 써주긴 했지만, 중괄호가 있을 때는 문장이 없어도 되므로 다음과 같이 쓸 수도 있다.
    for (int i=0; i < 1000000000; i++) {}

    
    2.2 while문
    for문과는 달리, 조건식과 수행해야할 문장블럭{}만으로 구성되어 있지만 카운터로 사용할 변수와 증감식을 함께 사용함으로써 for문과 같이 구성할 수 있다. 그래서 for문과 while문은 항상 서로 대신 사용할 수 있다.

    while (조건식) {
    // 조건식의 연산결과가 true일 때 수행될 문장들을 적는다.
    }

    [예제4-21]
    int i=10;
    while(i >=0) {
    System.out.println(i--);
    }
    
    [실행결과]
    10
    9
    8
    7
    6
    5
    4
    3
    2
    1
    0

 
    2.3 do-while문
    while문의 변형으로 기본적인 구조는 while문과 같으나 블럭{}이 먼저 수행한 후에 조건식을 판단한다는 것이 while과의 유일한 차이점이다.
    while문은 조건식의 결과에 따라 블럭{}이 한번도 수행되지 않을 수 있지만, do-while문은 최소한 한번은 수행될 것을 보장한다.

    do {
     // 조건식의 연산결과가 true일 때 수행될 문장들을 적는다.
    } while (조건식);
    
    
    2.4 break문
    switch문에서 이미 배운 것과 같이 break문은 현재 위치에서 가장 가까운 switch문 또는 반복문을 벗어나는데 사용된다. 주로 if문과 함께 사용되어 특정 조건을 만족하면 반복문을 벗어나도록 한다.
    
    
    2.5 continue문
    continue문은 반복문 내만 사용될 수 있으며, 반복이 진행 중에 continue문을 만나게 되면 반복문의 끝으로 이동하여 다음 반복으로 넘어간다.
    for문의 경우 증감식으로 이동하며, while문과 do-while문의 경우 조건식으로 이동한다. continue문은 반복문 전체를 벗어나지 않고 다음 반복을 계속 수행한다는 점이 break문과 다르다. 
    주로 if문과 함께 사용되어 특정 조건을 만족하는 경우에 continue문 이후의 문장들을 수행하지 않고 다음 반복으로 넘어가서 계속 진행하도록 한다.
    전체 반복 중에 특정조건을 만족하는 경우를 제외하고자 할 때 유용하다.
    
    
    2.6 이름 붙은 반복문
    여러 반복문이 중첩되어 있을 때 반복문 앞에 이름을 붙이고 break문과 continue문에 이름을 지정해 줌으로써 하나 이상의 반복문을 벗어나거나 반복을 건너뛸 수 있다.
