1. 조건문 - if, switch
    조건문은 조건식과 문장을 포함하는 블럭{}으로 구성되어 있으며, 조건식의 연산결과에 따라 프로그램의 실행흐름을 변경할 수 있다.
    
    1.1 if문
    * 구조
    
    if(조건식) {
        //조건식이 true일 때 수행될 문장들을 적는다.
    }
    if(조건식)
        문장; //수행될 문장이 단 하나일 경우 블럭{} 대신 문장을 사용할 수 있다.
    -> if 다음에 오는 조건식에서 연산의 최종결과 값이 true 또는 false인 수식만 사용할 수 있다.
    조건식의 결과가 false이면, 블럭{} 내의 문장이 실행되지 않는다.
    
    
    if(조건식) {
        //조건식이 true일 때 수행될 문장들을 적는다.
    } else {
        //조건식이 false일 때 수행될 문장들을 적는다.
    }
    if(조건식)
        문장;
    else
        문장;
    -> 조건식의 결과에 따라 이 두 개의 블럭 중 어느 한 블럭의 내용만 수행하고 전체 if문을 벗어나게 된다.
    
    
    if(조건식1) {
        //조건식1의 연산결과가 true일 때 수행될 문장들을 적는다.   
    } else if(조건식2) {
        //조건식2의 연산결과가 true일 때 수행될 문장들을 적는다.
    } else if(조건식3) {//여러 개의 else if를 사용할 수 있다.
        //조건식2의 연산결과가 true일 때 수행될 문장들을 적는다.
        //..
    } else { //마지막에는 보통 else블럭으로 끝나며, else블럭은 생략 가능하다.
        //위의 어느 조건식도 만족하지 않을 때 수행될 문장들을 적는다.
    }
    
    1.2 중첩 if문
    if문의 블럭 내에 또 다른 if문을 사용하는 것이 가능한데 이것을 중첩 if문이라고 부르며 중첩의 횟수에는 거의 제한이 없다.
    
    if(조건식1) {
        //조건식1의 연산결과가 true일 때, 수행될 문장들을 적는다.
        if(조건식2) {
            //조건식1과 조건식2가 모두 true일 때 수행될 문장들
        } else {
            //조건식1이 true, 조건식2가 false일 때 수행되는 문장들
        }
    }
    
    1.3 switch문
    조건의 경우의 수가 많을 때는 if문 보다 switch문을 사용하는 것이 더 간결하고 알아보기 쉽다.
    switch문의 조건식은 결과값으로 int형 범위의 정수값을 허용하므로, 하나의 조건식만 계산하면 그 결과에 따라서 해당 문장들을 수행하면 되므로 같은 기능의 if문보다 속도가 빠르다.
    하지만, switch문은 if문 보다 제약조건이 많기 때문에, 조건식을 switch문으로 작성할 수 없는 경우가 많다.
    
    switch문의 기본구조는 아래와 같다.
    
    switch (조건식) {
        case 값1 :
            // 조건식의 결과가 값1과 같을 경우 수행될 문장들
            //...
            break;
        case 값2 :
            // 조건식의 결과가 값2와 같을 경우 수행될 문장들
            //...
            break;
        //...
        default :
            // 조건식의 결과와 일치하는 case문이 없을 때 수행될 문장들
            //...
    }
    - switch문의 조건식은 연산결과가 int형 범위의 정수값이어야한다. byte, short, char, int 타입의 변수나 리터럴을 사용할 수 있다. 그리고, case문에는 반드시 상수값만을 허용한다. 변수는 허용되지 않으므로 유의해야한다.
    - switch문의 조건식을 먼저 계산한 다음, 그 결과와 일치하는 case문으로 이동하다. 이동한 case문 이하에 있는 문장들을 수행하며, break문을 만나면 전체 switch문을 빠져나가게 된다. 
    - 만일 case문 아래에 break문을 생략하면, 다른 break문을 만나거나 switch문 블럭의 끝을 만날 때까지 나오는 모든 문장들을 수행한다.
    - switch문에 각 case문마다 반드시 break문을 사용해야하는 것은 아니며, 이 성질을 잘 이용하면 보다 간결하고 논리적으로 명확한 코드를 작성할 수 있게 된다.
    - 반드시 속도를 더 향상시켜야 한다면 복잡하더라도 switch문을 선택해야겠지만, 그렇지 않다면 이런 경우 if문이 더 적합하다.
