1. 배열(Array)

    1.1 배열(Array)이란?
    같은 타입의 여러 변수를 하나의 묶음으로 다루는 것을 '배열(array)'이라고 한다.
    많은 양의 데이터를 저장하기 위해서, 그 데이터의 숫자만큼 변수를 선언해야 한다면 매우 혼란스러울 것이다.
    이런 경우에 배열을 사용하면 하나의 변수로 많은 양의 데이터를 손쉽게 다룰 수 있다.

    한 학급의 시험점수를 저장하고자 할 때가 배열을 사용하기 좋은 예이다. 만일 배열을 사용하지 않는다면 5명의 학생의 점수를 저장하기 위해서 아래와 같이 해야 할 것이다.
    int score1=0, score2=0, score3=0, score4=0, score5=0 ;

    배열을 사용하면 다음과 같이 간단히 할 수 있다.
    int[] score = new int[5]; // 5개의 int 값을 저장할 수 있는 배열을 생성한다.
    
    
    1.2 배열의 선언
    배열을 선언하는 방법은 간단하다. 원하는 타입의 변수를 선언하고 변수 또는 타입에 배열임을 의미하는 대괄호[]를 붙이면 된다.
    
    int[] score;        //타입[] 변수이름;
    String[] name;
    
    int score[];        //타입 변수이름[];
    String name[];
    
    
    1.3 배열의 생성
    배열을 선언한 다음에는 배열을 생성해야한다. 배열을 선언하는 것은 단지 생성된 배열을 다루기 위한 참조변수를 위한 공간이 만들어지는 것 뿐이다. 배열을 생성해야만 비로소 데이터를 저장할 수 있는 공간이 만들어지는 것이다.
    배열을 생성하기 위해서는 new연산자를 사용하고 배열의 타입과 크기를 지정해 주어야 한다.

    int[] score; // 배열을 선언한다.(생성된 배열을 다루는데 사용될 참조변수 선언)
    score = new int[5]; // 배열을 생성한다.(5개의 int값을 저장할 수 있는 공간생성)
    [참고] 위의 두 문장은int[] score = new int[5];와 같이 한 문장으로 줄여 쓸 수 있다.
    
    
    1.4 배열의 초기화
    배열은 생성과 동시에 자동적으로 자신의 타입에 해당하는 기본값으로 초기화되므로 배열을 사용하기 전에 초기화를 해주지 않아도 되지만, 원하는 값으로 초기화 하기 위해서 다음과 같이 한다.

    int[] score = new int[5]; // 크기가 5인 int형 배열을 생성한다.
    score[0] = 100; // 각 요소에 직접 값을 저장한다.
    score[1] = 90;
    score[2] = 80;
    score[3] = 70;
    score[4] = 60;
    
    
    1.5 배열의 활용
    배열의 각 저장공간에 값을 저장하고 또는 저장된 값을 읽어오기 위해서는 배열 참조변수와 인덱스를 이용한다. 배열의 인덱스는 배열의 각 저장공간에 자동적으로 주어지는 일련 번호인데, 0부터 시작해서 1씩 증가하는 연속적인 값이다. 
    크기가 5인 배열에서는 index의 범위가 0~4까지 모두 5개가 된다. 배열의 값을 읽거나 저장하기 위해서는 다음과 같이 배열 참조변수와 배열의 인덱스를 사용하면 된다.

    score[3] = 100; // 배열 score의 4번째 요소에 100을 저장한다.
    int value = score[3]; // 배열 score의 4번째 요소에 저장된 값을 읽어서 value에 저장.
    배열을 다루는데 있어서 for문은 거의 필수적으로 사용된다. 이 때 for문의 조건식으로 배열의 크기를 직접 적어주는 것보다 배열의 속성인 length를 사용하는 것이 더 견고한 코드를 만든다.

    int[] score = { 100, 90, 80, 70, 60, 50 };
    for (int i=0; i < 6; i++) {
        System.out.println(score[i]);
    }
    위의 코드는 배열의 각 요소를 for문을 이용해서 출력하는 일을 한다. 여기서 score배열의 크기는 6이며 인덱스의 범위는 0~5이다.
    이 때 코드를 다음과 같이 변경하여 배열에 저장될 값을 하나 줄인다면, 배열의 크기가 5로 변경되었으므로 유효한 인덱스의 범위는 0~4가 된다.

    int[] score = { 100, 90, 80, 70, 60 };
    for (int i=0; i < 6; i++) {
        System.out.println(score[i]);
    }
    배열의 크기가 변경되었으니 for문에 사용되는 조건의 범위도 변경해주어야 하는데, 만일 이 것을 잊고 실행한다면 for문은 배열의 유효한 인덱스 범위인 0~4를 넘어 0부터 5까지 반복하기 때문에 
    5번째 반복에서 ArrayIndexOutOfBoundsException이라는 예외(일종의 에러)가 발생하여 비정상적으로 종료될 것이다.
    그래서 이러한 경우에는 for문의 조건식에 배열의 크기를 직접 적어주는 것보다 배열의 멤버변수인 length를 사용하는 것이 좋다. 위의 for문을 length를 사용해서 변경하면 다음과 같다.
    for(int i=0; i < score.length; i++) {
        System.out.println(score[i]);
    }

    length는 배열의 크기가 변경됨에 따라 자동적으로 변경된 배열의 크기를 갖기 때문에, 배열의 처리에 사용되는 for문의 조건식을 일일이 변경해주지 않아도 된다.
    이처럼 배열의 크기를 직접 적어주는 것보다 배열의 멤버변수인 length를 사용하는 것이 더 편리하고 안전하다.

    
    1.6 다차원 배열
    2차원 배열은 주로 테이블 형태의 데이터를 담는데 사용되며, 만일 5행 3열의 데이터를 담기 위한 배열을 생성하려면 다음과 같이한다.
    int[][] score = new int[5][3]; // 5행 3열의 2차원 배열을 생성한다.
    
    score[0][0]=100 ;
    score[0][1]=100 ;
    score[0][2]=100 ;
    score[1][0]=20 ;
    score[1][1]=20 ;
    ...
    score[4][2]=50 ;

    
    1.7 가변 배열
    2차원 이상의 다차원 배열을 생성할 때 전체 배열 차수 중 마지막 차수의 크기를 지정하지 않고, 추후에 각기 다른 크기의 배열을 생성함으로써 고정된 형태가 아닌 보다 유동적인 가변 배열을 구성할 수 있다.
    만일 다음과 같이 5 * 3크기의 2차원 배열 score를 생성하는 코드가 있을 때,

    int[][] score = new int[5][3];
    위 코드를 다음과 같이 표현 할 수 있다.

    int[][] score = new int[5][]; // 두 번째 차원의 크기는 지정하지 않는다.
    score[0] = new int[3];
    score[1] = new int[3];
    score[2] = new int[3];
    score[3] = new int[3];
    score[4] = new int[3];

    첫 번째 코드와 같이 2차원 배열을 생성하면 직사각형 테이블 형태의 고정적인 배열만 생성할 수 있지만, 두 번째 코드와 같이 2차원 배열을 생성하면 다음과 같이 각 열마다 다른 크기의 배열이 생성하는 것이 가능하다.

    int[][] score = new int[5][];
    score[0] = new int[4];
    score[1] = new int[3];
    score[2] = new int[2];
    score[3] = new int[2];
    score[4] = new int[3];

    
    1.8 배열의 복사
    배열은 한번 생성하면 그 크기를 변경할 수 없기 때문에 더 많은 저장공간이 필요하다면 보다 큰 배열을 새로 만들고 이전 배열로부터 내용을 복사해야한다.
    배열 간의 내용을 복사하려면 for문을 사용하거나 System클래스의 arraycopy메서드를 사용하면 된다.

    [예제5-8]

    class ArrayEx8
    {
        public static void main(String[] args)
        {
            int[] number = {0,1,2,3,4,5};
            int[] newNumber = new int[10];
        
            for(int i=0; i < number.length;i++) {
            newNumber[i] = number[i];   //배열 number의 값을 newNumber에 저장한다.
            }
        
            for(int i=0;i < newNumber.length;i++) {
            System.out.print(newNumber[i]);
        }
        }
    }
    [실행결과]
    0123450000
